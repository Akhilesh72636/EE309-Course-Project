library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ALU is
	port (
       	opcode : IN STD_LOGIC_VECTOR(3 downto 0);     ---------input 
		   c_in, z_in: IN STD_LOGIC;
		   ALUa, ALUb : IN STD_LOGIC_VECTOR(15 downto 0);
			clk: in std_logic;
			---------------------------------------------------
		   ComBit : IN STD_LOGIC_VECTOR(0 downto 0);
		   ALUc: OUT STD_LOGIC_VECTOR(15 downto 0);       ------------ output
		   c_out, z_out: OUT STD_LOGIC);
end ALU;


architecture behave of ALU is
  begin
  
 
  
      process(opcode,c_in, z_in, ALUa, ALUb,ComBit,clk)
		
		
    
	  variable T1, compvalue,One: STD_LOGIC_VECTOR(15 downto 0);
      begin
		 if (clk'event and clk = '1') then
		  case opcode is
		   when "0010" =>
				  ALUc<= ALUa nand ALUb;
				  T1 := ALUa nand ALUb;
				  c_out <= '0';
				  if T1 = x"0000" then
					  z_out <= '1';
				  else
					  z_out <= '0';
				  end if;
				  
			when "0001" =>
			   if(ComBit ="1")  then
			  
			      compvalue :=not ALUb;
				   ALUc<= STD_LOGIC_VECTOR(unsigned(ALUa) + unsigned(compvalue));
					T1 := STD_LOGIC_VECTOR(unsigned(ALUa) + unsigned(compvalue));
					c_out <= (ALUa(15) and compvalue(15) and (not T1(15))) or ((not ALUa(15)) and (not compvalue(15)) and T1(15));
					   if T1 = x"0000" then
						z_out <= '1';
					   else
						z_out <= '0';
				      end if;
			   else 	 
			      ALUc<= STD_LOGIC_VECTOR(unsigned(ALUa) + unsigned(ALUb));
					T1 := STD_LOGIC_VECTOR(unsigned(ALUa) + unsigned(ALUb));
					c_out <= (ALUa(15) and ALUb(15) and (not T1(15))) or ((not ALUa(15)) and (not ALUb(15)) and T1(15));
					   if T1 = x"0000" then
						z_out <= '1';
					   else
						z_out <= '0';
				      end if;
					 
				end if;
				
				when "10" =>
		      ALUc<= STD_LOGIC_VECTOR(unsigned(ALUa) - unsigned(ALUb));
					T1 := STD_LOGIC_VECTOR(unsigned(ALUa) - unsigned(ALUb));
					c_out <= (ALUa(15) and ALUb(15) and (not T1(15))) or ((not ALUa(15)) and (not ALUb(15)) and T1(15));
					if T1 = x"0000" then
						z_out <= '1';
					else
						z_out <= '0';
					end if;
		
			  
			  when others  => --ADD
					ALUc<= STD_LOGIC_VECTOR(unsigned(ALUa) + unsigned(ALUb));
					T1 := STD_LOGIC_VECTOR(unsigned(ALUa) + unsigned(ALUb));
					c_out <= (ALUa(15) and ALUb(15) and (not T1(15))) or ((not ALUa(15)) and (not ALUb(15)) and T1(15));
					if T1 = x"0000" then
						z_out <= '1';
					else
						z_out <= '0';
					end if;
          end case;
			 end if;
		end process;

end behave;